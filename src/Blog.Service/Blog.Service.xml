<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Blog.Service</name>
    </assembly>
    <members>
        <member name="P:Blog.Service.Base.CrudApplicationSvc`7.Repository">
            <summary>
            仓储
            </summary>
        </member>
        <member name="M:Blog.Service.Blog.Article.IArticleSvc.GetPagesAsync(Blog.Service.Blog.Article.Input.ArticlePagingDto)">
            <summary>
            获取文章分页数据
            </summary>
            <param name="pagingDto">分页参数</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Service.Blog.Article.IArticleSvc.GetAsync(System.Int64)">
            <summary>
            获取文章详情
            </summary>
            <param name="id">文章Id</param>
            <returns></returns>
        </member>
        <member name="P:Blog.Service.Blog.Article.Input.ArticlePagingDto.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.Article.Input.ArticlePagingDto.Author">
            <summary>
            作者
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.Article.Input.ArticlePagingDto.IsTop">
            <summary>
            是否置顶
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.Article.Input.ArticlePagingDto.CategoryId">
            <summary>
            分类Id
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.Article.Input.ArticlePagingDto.CreateTimeStart">
            <summary>
            创建时间起
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.Article.Input.ArticlePagingDto.CreateTimeEnd">
            <summary>
            创建时间止
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.Article.Output.ArticleContentDto.Html">
            <summary>
            HTML
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.Article.Output.ArticleContentDto.Markdown">
            <summary>
            Markdown
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.Article.Output.ArticleDto.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.Article.Output.ArticleDto.TitleColor">
            <summary>
            标题颜色
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.Article.Output.ArticleDto.Subtitle">
            <summary>
            副标题
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.Article.Output.ArticleDto.Introduction">
            <summary>
            简介
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.Article.Output.ArticleDto.Author">
            <summary>
            作者
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.Article.Output.ArticleDto.Url">
            <summary>
            链接
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.Article.Output.ArticleDto.IsTop">
            <summary>
            是否置顶
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.Article.Output.ArticleDto.Hits">
            <summary>
            点击数
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.Article.Output.ArticleDto.Comments">
            <summary>
            评论数
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.Article.Output.ArticleDto.ThumbnailUrl">
            <summary>
            缩略图地址
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.Article.Output.ArticleDto.Category">
            <summary>
            分类
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.Article.Output.ArticleDto.Tags">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.Article.Output.ArticleDto.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="M:Blog.Service.Blog.Category.ICategorySvc.AddAsync(Blog.Service.Blog.Category.Input.AddCategoryDto)">
            <summary>
            新增文章分类
            </summary>
            <param name="add">文章分类信息</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Service.Blog.Category.ICategorySvc.DeleteAsync(System.Int64)">
            <summary>
            删除文章分类
            </summary>
            <param name="id">文章分类Id</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Service.Blog.Category.ICategorySvc.GetAsync(System.Int64)">
            <summary>
            获取文章分类
            </summary>
            <param name="id">文章分类Id</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Service.Blog.Category.ICategorySvc.GetsAsync">
            <summary>
            获取所有文章分类列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Service.Blog.Category.ICategorySvc.UpdateAsync(Blog.Service.Blog.Category.Input.ModifyCategoryDto)">
            <summary>
            更新文章分类
            </summary>
            <param name="modify">文章分类信息</param>
            <returns></returns>
        </member>
        <member name="P:Blog.Service.Blog.Category.Input.AddCategoryDto.Name">
            <summary>
            分类名称
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.Category.Input.AddCategoryDto.Sort">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.Category.Output.CategoryDto.Name">
            <summary>
            分类名称
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.Category.Output.CategoryDto.Sort">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.Category.Output.CategoryTotalDto.Total">
            <summary>
            关联文章数量
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.FriendLink.Output.FriendLinkDto.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.FriendLink.Output.FriendLinkDto.Desc">
            <summary>
            简介
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.FriendLink.Output.FriendLinkDto.LinkUrl">
            <summary>
            链接
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.Tag.Input.AddTagDto.Name">
            <summary>
            标签名称
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.Tag.Input.AddTagDto.Sort">
            <summary>
            排序
            </summary>
        </member>
        <member name="M:Blog.Service.Blog.Tag.ITagSvc.AddAsync(Blog.Service.Blog.Tag.Input.AddTagDto)">
            <summary>
            新增文章标签
            </summary>
            <param name="add">文章标签信息</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Service.Blog.Tag.ITagSvc.DeleteAsync(System.Int64)">
            <summary>
            删除文章标签
            </summary>
            <param name="id">文章标签Id</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Service.Blog.Tag.ITagSvc.GetAsync(System.Int64)">
            <summary>
            获取文章标签
            </summary>
            <param name="id">文章标签Id</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Service.Blog.Tag.ITagSvc.GetsAsync">
            <summary>
            获取所有文章标签列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Service.Blog.Tag.ITagSvc.UpdateAsync(Blog.Service.Blog.Tag.Input.ModifyTagDto)">
            <summary>
            更新文章标签
            </summary>
            <param name="modify">文章标签信息</param>
            <returns></returns>
        </member>
        <member name="P:Blog.Service.Blog.Tag.Output.TagDto.Name">
            <summary>
            标签名称
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.Tag.Output.TagDto.Sort">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:Blog.Service.Blog.Tag.Output.TagTotalDto.Total">
            <summary>
            关联文章数量
            </summary>
        </member>
        <member name="M:Blog.Service.Core.Auth.AuthorizeSvc.GetLoginUrlAsync">
            <summary>
            构建GitHub登录地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Service.Core.Auth.AuthorizeSvc.GetAccessTokenAsync(System.String)">
            <summary>
            获取AccessToken
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Service.Core.Auth.AuthorizeSvc.GenerateTokenAsync(System.String)">
            <summary>
            登录GitHub成功，生成Token
            </summary>
            <param name="accessToken"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Service.Core.Auth.IAuthorizeSvc.GetLoginUrlAsync">
            <summary>
            获取登录地址（GitHub）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Service.Core.Auth.IAuthorizeSvc.GetAccessTokenAsync(System.String)">
            <summary>
            获取AccessToken
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Service.Core.Auth.IAuthorizeSvc.GenerateTokenAsync(System.String)">
            <summary>
            登录成功，生成Token
            </summary>
            <param name="accessToken"></param>
            <returns></returns>
        </member>
        <member name="F:Blog.Service.Core.Auth.Input.GitHub.AccessTokenInput.ClientId">
            <summary>
            Client ID
            </summary>
        </member>
        <member name="F:Blog.Service.Core.Auth.Input.GitHub.AccessTokenInput.ClientSecret">
            <summary>
            Client Secret
            </summary>
        </member>
        <member name="P:Blog.Service.Core.Auth.Input.GitHub.AccessTokenInput.Code">
            <summary>
            调用API_Authorize获取到的Code值
            </summary>
        </member>
        <member name="F:Blog.Service.Core.Auth.Input.GitHub.AccessTokenInput.RedirectUri">
            <summary>
            Authorization callback URL
            </summary>
        </member>
        <member name="P:Blog.Service.Core.Auth.Input.GitHub.AccessTokenInput.State">
            <summary>
            State
            </summary>
        </member>
        <member name="F:Blog.Service.Core.Auth.Input.GitHub.AuthorizeInput.ClientId">
            <summary>
            客户端Id
            </summary>
        </member>
        <member name="F:Blog.Service.Core.Auth.Input.GitHub.AuthorizeInput.RedirectUri">
            <summary>
            授权回调地址
            </summary>
        </member>
        <member name="P:Blog.Service.Core.Auth.Input.GitHub.AuthorizeInput.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:Blog.Service.Core.Auth.Input.GitHub.AuthorizeInput.Scope">
            <summary>
            该参数可选，需要调用Github哪些信息，可以填写多个，以逗号分割，比如：scope=user,public_repo。
            如果不填写，那么你的应用程序将只能读取Github公开的信息，比如公开的用户信息，公开的库(repository)信息以及gists信息
            </summary>
        </member>
        <member name="M:Blog.Service.Core.Files.IFileSvc.UploadAsync(Microsoft.AspNetCore.Http.IFormFile,System.String,System.Int32)">
            <summary>
            单文件上传，键为file
            </summary>
            <param name="file"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Service.Core.Files.LocalFileSvc.UploadAsync(Microsoft.AspNetCore.Http.IFormFile,System.String,System.Int32)">
            <summary>
            本地文件上传，秒传（根据lin_file表中的md5,与当前文件的路径是否在本地），如果不在，重新上传，覆盖文件表记录
            </summary>
            <param name="file"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Service.Core.Files.LocalFileSvc.LocalUploadAsync(Microsoft.AspNetCore.Http.IFormFile,System.String)">
            <summary>
            本地文件上传，生成目录格式 {STORE_DIR}/{year}/{month}/{day}/{guid}.文件后缀
            images/2022-01-12/fba73a0c-f2f7-499a-8ed8-5b10554d43b0.jpg
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
    </members>
</doc>
